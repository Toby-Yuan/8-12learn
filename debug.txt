// script區域只要有一行錯誤, 整段就不會跑!!

// 基礎失誤, 不要錯這個啊
1. 字串應該被一對單引號或雙引號包住

2. 注意命名大小寫

3. html中script有分開始和結束標籤, 即使是連接檔案也要加

4. function的語法: function () {}; 

5. 括弧都是對稱的

6. 在加法時, int的數字會自動變成string

7. 在減法時, string的數字會自動變成int

8. 注意連接位置是https還是http, 是什麼就要打什麼

9. 字串-->數字, Number()或是parseInt("",int) 轉換成int進位

10. 數字-->字串, toString()

11. 副程式不會更改主程式的參數內容(本質), 因為參數的區域性, 但是陣列或是資料可以改變

// try catch
// try就像是大型的if篩選, 不通過的會到catch裡面執行
// 語法
try{

}
catch(error){

}

// 上課範例
var mailList = [
    "jeremy.lin@gmail.com", 
    "derek.jeter@gmail.com",
    "chien-ming.wang@gmail.com",
    undefined,
    "lionel.messi@gmail.com"
];
    
function sendMail(mailAddress) {
    try {
        $("#report").append(mailAddress.toString() + "<br>");
    }
    catch (e) {
        $("#report").append(e.message + "<br>");
    }
}
    
for (i = 0; i < mailList.length; i++) {
    sendMail(mailList[i]);
}

// 有問題的在跑一次
var mailList = [
    "jeremy.lin@gmail.com", 
    "derek.jeter@gmail.com",
    "chien-ming.wang@gmail.com",
    undefined,
    "lionel.messi@gmail.com"
];
    
function sendMail(mailAddress) {
    var errorCount = 0;
    try {
        $("#report").append(mailAddress.toString() + "<br>");
    }
    catch (e) {
        errorCount++;
        $("#report").append(e.message + "<br>");
    }
    return errorCount;
}
    
for (i = 0; i < mailList.length; i++) {
    if (sendMail(mailList[i]) > 0){
        sendMail(mailList[i]);
    }
}

// debugger : 終端點
// 須符合兩個條件: 1.程式內部要有debugger 2.瀏覽頁面要開啟追蹤模式(F12 -> Sources)
// F12 -> Sources -> Call Stack : 可以看到各個函數的呼叫關係

// console.assert : 若不通過則顯示提示, 但是沒有實質上的制止程式執行
// 邏輯上會相反, console.assert( 放錯誤的條件, 然後 )